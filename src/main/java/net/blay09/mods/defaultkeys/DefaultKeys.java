package net.blay09.mods.defaultkeys;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.blay09.mods.defaultkeys.localconfig.ForgeConfigHandler;
import net.blay09.mods.defaultkeys.localconfig.INIConfigHandler;
import net.blay09.mods.defaultkeys.localconfig.LocalConfigEntry;
import net.blay09.mods.defaultkeys.localconfig.SimpleConfigHandler;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.settings.KeyBinding;
import net.minecraftforge.client.ClientCommandHandler;
import net.minecraftforge.client.event.GuiOpenEvent;
import net.minecraftforge.common.MinecraftForge;

import org.apache.commons.io.IOUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.common.collect.ArrayListMultimap;

import cpw.mods.fml.client.FMLClientHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;

@Mod(
    acceptableRemoteVersions = "*",
    acceptedMinecraftVersions = "[1.7.10]",
    modid = DefaultKeys.MOD_ID,
    name = "Default Configs",
    version = Tags.VERSION)
public class DefaultKeys {

    public static final String MOD_ID = "defaultkeys";
    public static final Logger logger = LogManager.getLogger();

    @Mod.Instance
    public static DefaultKeys instance;

    private static boolean initialized;
    private static Map<String, Integer> defaultKeys = new HashMap<>();
    private static List<String> knownKeys = new ArrayList<>();

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        ClientCommandHandler.instance.registerCommand(new CommandDefaultOptions());
        MinecraftForge.EVENT_BUS.register(this);
    }

    @SuppressWarnings("unused")
    public static void preStartGame() {
        File mcDataDir = Minecraft.getMinecraft().mcDataDir;
        File optionsFile = new File(mcDataDir, "options.txt");
        if (!optionsFile.exists()) {
            applyDefaultOptions();
        }
        File optionsFileOF = new File(mcDataDir, "optionsof.txt");
        if (!optionsFileOF.exists()) {
            applyDefaultOptionsOptiFine();
        }
        File localConfigDefs = new File(mcDataDir, "config/localconfig.txt");
        if (!localConfigDefs.exists()) {
            try (
                InputStreamReader reader = new InputStreamReader(
                    DefaultKeys.class.getResourceAsStream("/assets/defaultkeys/default-localconfig.txt"));
                FileWriter writer = new FileWriter(localConfigDefs)) {
                IOUtils.copy(reader, writer);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        File exampleConfigDefs = new File(mcDataDir, "config/localconfig-example.txt");
        if (!exampleConfigDefs.exists()) {
            try (
                InputStreamReader reader = new InputStreamReader(
                    DefaultKeys.class.getResourceAsStream("/assets/defaultkeys/example-localconfig.txt"));
                FileWriter writer = new FileWriter(exampleConfigDefs)) {
                IOUtils.copy(reader, writer);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        File modpackUpdate = new File(mcDataDir, "config/modpack-update");
        if (modpackUpdate.exists()) {
            if (restoreLocalConfig()) {
                // if (!modpackUpdate.delete()) {
                // logger.error("Could not delete modpack-update file. Delete manually or configs will keep restoring to
                // this point.");
                // }
            }
        } else {
            backupLocalConfig();
        }
    }

    public static boolean backupLocalConfig() {
        logger.info("Backing up local config values...");
        File mcDataDir = Minecraft.getMinecraft().mcDataDir;
        File localConfigFile = new File(mcDataDir, "config/localconfig.txt");
        if (localConfigFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(localConfigFile));
                PrintWriter writer = new PrintWriter(new File(mcDataDir, "localconfig.cfg"))) {
                writer.println("# This file is automatically generated on each startup.");
                writer.println("# You don't want to change anything in here as it'll get overriden anyways.");
                writer.println("# Just leave this file be and go edit the respective config files instead.");
                writer.println();
                List<LocalConfigEntry> entries = new ArrayList<>();
                String line;
                while ((line = reader.readLine()) != null) {
                    LocalConfigEntry entry = LocalConfigEntry.fromString(line, false);
                    if (entry != null) {
                        entries.add(entry);
                    }
                }
                ArrayListMultimap<String, LocalConfigEntry> fileEntries = ArrayListMultimap.create();
                for (LocalConfigEntry entry : entries) {
                    fileEntries.put(entry.file + "//" + entry.getFormat(), entry);
                }
                for (String key : fileEntries.keySet()) {
                    List<LocalConfigEntry> list = fileEntries.get(key);
                    LocalConfigEntry first = list.get(0);
                    File configFile = new File(mcDataDir, "config/" + first.file);
                    if (!configFile.exists()) {
                        logger.warn("Skipping entry for {}: file at {} not found", first.getIdentifier(), configFile);
                        continue;
                    }
                    switch (first.getFormat()) {
                        case "forge":
                            ForgeConfigHandler.backup(writer, list, configFile);
                            break;
                        case "simple":
                            SimpleConfigHandler.backup(writer, list, configFile);
                            break;
                        case "ini":
                            INIConfigHandler.backup(writer, list, configFile);
                            break;
                        default:
                            logger.error(
                                "Skipping entry for {}: unknown format {}",
                                first.getIdentifier(),
                                first.getFormat());
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }

    public static boolean restoreLocalConfig() {
        logger.info("Restoring local config values...");
        File mcDataDir = Minecraft.getMinecraft().mcDataDir;
        File localConfigFile = new File(mcDataDir, "config/localconfig.txt");
        if (localConfigFile.exists()) {
            try (BufferedReader defReader = new BufferedReader(new FileReader(localConfigFile));
                BufferedReader valReader = new BufferedReader(new FileReader(new File(mcDataDir, "localconfig.cfg")))) {
                List<LocalConfigEntry> defEntries = new ArrayList<>();
                String line;
                while ((line = defReader.readLine()) != null) {
                    LocalConfigEntry entry = LocalConfigEntry.fromString(line, false);
                    if (entry != null) {
                        defEntries.add(entry);
                    }
                }
                List<LocalConfigEntry> entries = new ArrayList<>();
                while ((line = valReader.readLine()) != null) {
                    LocalConfigEntry entry = LocalConfigEntry.fromString(line, true);
                    if (entry != null) {
                        for (LocalConfigEntry defEntry : defEntries) {
                            if (defEntry.file.equals(entry.file)
                                && defEntry.passesProperty(entry.category, entry.name, entry.type)) {
                                entry.parameters.putAll(defEntry.parameters);
                                entries.add(entry);
                                break;
                            }
                        }
                    }
                }
                ArrayListMultimap<String, LocalConfigEntry> fileEntries = ArrayListMultimap.create();
                for (LocalConfigEntry entry : entries) {
                    fileEntries.put(entry.file + "//" + entry.getFormat(), entry);
                }
                for (String key : fileEntries.keySet()) {
                    List<LocalConfigEntry> list = fileEntries.get(key);
                    LocalConfigEntry first = list.get(0);
                    File configFile = new File(mcDataDir, "config/" + first.file);
                    if (!configFile.exists()) {
                        logger.warn("Skipping entry for {}: file at {} not found", first.getIdentifier(), configFile);
                        continue;
                    }
                    switch (first.getFormat()) {
                        case "forge":
                            ForgeConfigHandler.restore(list, configFile);
                            break;
                        case "simple":
                            SimpleConfigHandler.restore(list, configFile);
                            break;
                        case "ini":
                            INIConfigHandler.restore(list, configFile);
                            break;
                        default:
                            logger.error(
                                "Skipping entry for {}: unknown format {}",
                                first.getIdentifier(),
                                first.getFormat());
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }

    public static boolean applyDefaultOptions() {
        File defaultOptionsFile = new File(Minecraft.getMinecraft().mcDataDir, "config/defaultoptions.txt");
        if (defaultOptionsFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(defaultOptionsFile));
                PrintWriter writer = new PrintWriter(
                    new FileWriter(new File(Minecraft.getMinecraft().mcDataDir, "options.txt")))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.startsWith("key_")) {
                        continue;
                    }
                    writer.println(line);
                }
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }

    public static boolean applyDefaultOptionsOptiFine() {
        File defaultOptionsFile = new File(Minecraft.getMinecraft().mcDataDir, "config/defaultoptionsof.txt");
        if (defaultOptionsFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(defaultOptionsFile));
                PrintWriter writer = new PrintWriter(
                    new FileWriter(new File(Minecraft.getMinecraft().mcDataDir, "optionsof.txt")))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    writer.println(line);
                }
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }

    @SubscribeEvent
    @SuppressWarnings("unused")
    public void finishMinecraftLoading(GuiOpenEvent event) {
        if (!initialized && event.gui instanceof GuiMainMenu) {
            reloadDefaultMappings();
            initialized = true;
        }
    }

    public boolean saveDefaultOptionsOptiFine() {
        if (!FMLClientHandler.instance()
            .hasOptifine()) {
            return true;
        }
        Minecraft.getMinecraft().gameSettings.saveOptions();
        try (
            PrintWriter writer = new PrintWriter(
                new FileWriter(new File(Minecraft.getMinecraft().mcDataDir, "config/defaultoptionsof.txt")));
            BufferedReader reader = new BufferedReader(
                new FileReader(new File(Minecraft.getMinecraft().mcDataDir, "optionsof.txt")))) {
            String line;
            while ((line = reader.readLine()) != null) {
                writer.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public boolean saveDefaultOptions() {
        Minecraft.getMinecraft().gameSettings.saveOptions();
        try (
            PrintWriter writer = new PrintWriter(
                new FileWriter(new File(Minecraft.getMinecraft().mcDataDir, "config/defaultoptions.txt")));
            BufferedReader reader = new BufferedReader(
                new FileReader(new File(Minecraft.getMinecraft().mcDataDir, "options.txt")))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("key_")) {
                    continue;
                }
                writer.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public boolean saveDefaultMappings() {
        try (PrintWriter writer = new PrintWriter(
            new FileWriter(new File(Minecraft.getMinecraft().mcDataDir, "config/defaultkeys.txt")))) {
            for (KeyBinding keyBinding : Minecraft.getMinecraft().gameSettings.keyBindings) {
                writer.println("key_" + keyBinding.getKeyDescription() + ":" + keyBinding.getKeyCode());
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public void reloadDefaultMappings() {
        // Clear old values
        defaultKeys.clear();
        knownKeys.clear();

        // Load the default keys from the config
        File defaultKeysFile = new File(Minecraft.getMinecraft().mcDataDir, "config/defaultkeys.txt");
        if (defaultKeysFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(defaultKeysFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.isEmpty()) {
                        continue;
                    }
                    String[] s = line.split(":");
                    if (s.length != 2 || !s[0].startsWith("key_")) {
                        continue;
                    }
                    try {
                        defaultKeys.put(s[0].substring(4), Integer.parseInt(s[1]));
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                }
            } catch (java.io.IOException e) {
                e.printStackTrace();
            }
        }

        // Load the known keys from the Minecraft directory
        File knownKeysFile = new File(Minecraft.getMinecraft().mcDataDir, "knownkeys.txt");
        if (knownKeysFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(knownKeysFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (!line.isEmpty()) {
                        knownKeys.add(line);
                    }
                }
            } catch (java.io.IOException e) {
                e.printStackTrace();
            }
        }

        // Override the default mappings and set the initial key codes, if the key is not known yet
        for (KeyBinding keyBinding : Minecraft.getMinecraft().gameSettings.keyBindings) {
            if (defaultKeys.containsKey(keyBinding.getKeyDescription())) {
                keyBinding.keyCodeDefault = defaultKeys.get(keyBinding.getKeyDescription());
                if (!knownKeys.contains(keyBinding.getKeyDescription())) {
                    keyBinding.setKeyCode(keyBinding.getKeyCodeDefault());
                    knownKeys.add(keyBinding.getKeyDescription());
                }
            }
        }
        KeyBinding.resetKeyBindingArrayAndHash();

        // Save the updated known keys to the knownkeys.txt file in the Minecraft directory
        try (PrintWriter writer = new PrintWriter(
            new FileWriter(new File(Minecraft.getMinecraft().mcDataDir, "knownkeys.txt")))) {
            for (String s : knownKeys) {
                writer.println(s);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
